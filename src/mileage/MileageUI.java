/*
 * This class contains the Main method and user interface for the MileageAdder
 * application. It instantiates and calls methods from the MileageAdder and 
 * LogBuilder classes.
*/
package mileage;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.awt.*;
import java.io.*;
import java.nio.file.Files;

public class MileageUI extends javax.swing.JFrame {

    public static Path workingDirectory;
    private double avgWeeklyMileage;
    private final WeeklyMileagePanel weeklyPanel;
    private boolean mustDeleteFile, leapYear;
    private String filename, firstDayOfTheWeekString;
    private Path newFile;
    
    public MileageUI() {
        initComponents();
        weeklyPanel = new WeeklyMileagePanel();
        weeklyPanel.setLocation(50, 200);
        weeklyPanel.setSize(270, 30);
        add(weeklyPanel);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        WorkingDirectoryFrame = new javax.swing.JFrame();
        WorkingDirectoryFrameLabel1 = new javax.swing.JLabel();
        WorkingDirectoryFrameLabel2 = new javax.swing.JLabel();
        WorkingDirectoryFrameCancelButton = new javax.swing.JButton();
        WorkingDirectoryFrameSetButton = new javax.swing.JButton();
        WorkingDirectoryTextField = new javax.swing.JTextField();
        LogBuilderFrame = new javax.swing.JFrame();
        LogBuilderFrameLabel1 = new javax.swing.JLabel();
        FileNameField = new javax.swing.JTextField();
        LogBuilderFrameLabel3 = new javax.swing.JLabel();
        DayOfTheWeekChooser = new javax.swing.JComboBox();
        LogBuilderFrameLabel2 = new javax.swing.JLabel();
        LeapYearCheck = new javax.swing.JCheckBox();
        LogBuilderBuildButton = new javax.swing.JButton();
        LogBuilderCompleteNotification = new javax.swing.JLabel();
        LogBuilderCloseButton = new javax.swing.JButton();
        OverwritePopup = new javax.swing.JDialog();
        OverwritePopupLabel1 = new javax.swing.JLabel();
        OverwritePopupLabel2 = new javax.swing.JLabel();
        OverwriteYes = new javax.swing.JButton();
        OverwriteNo = new javax.swing.JButton();
        FromLabel = new javax.swing.JLabel();
        ToLabel = new javax.swing.JLabel();
        TotalMileageOutputText = new javax.swing.JTextField();
        TotalMileageLabel = new javax.swing.JLabel();
        FromMonthComboBox = new javax.swing.JComboBox();
        ToMonthComboBox = new javax.swing.JComboBox();
        FromYearComboBox = new javax.swing.JComboBox();
        ToYearComboBox = new javax.swing.JComboBox();
        FromDayComboBox = new javax.swing.JComboBox();
        ToDayComboBox = new javax.swing.JComboBox();
        MainMenuBar = new javax.swing.JMenuBar();
        MainMenuDropdown = new javax.swing.JMenu();
        WorkingDirectoryMenuItem = new javax.swing.JMenuItem();
        LogBuilderMenuItem = new javax.swing.JMenuItem();
        ExitMenuItem = new javax.swing.JMenuItem();

        WorkingDirectoryFrame.setAlwaysOnTop(true);
        WorkingDirectoryFrame.setLocationByPlatform(true);
        WorkingDirectoryFrame.setMinimumSize(new java.awt.Dimension(530, 230));
        WorkingDirectoryFrame.setPreferredSize(new java.awt.Dimension(530, 230));
        WorkingDirectoryFrame.setResizable(false);

        WorkingDirectoryFrameLabel1.setText("Working directory is shown below:");

        WorkingDirectoryFrameLabel2.setText("This is where the program will look for log files to scan, and place newly created log files.");

        WorkingDirectoryFrameCancelButton.setText("Cancel");
        WorkingDirectoryFrameCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WorkingDirectoryFrameCancelButtonActionPerformed(evt);
            }
        });

        WorkingDirectoryFrameSetButton.setText("Set directory");
        WorkingDirectoryFrameSetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WorkingDirectoryFrameSetButtonActionPerformed(evt);
            }
        });

        WorkingDirectoryTextField.setText("jTextField1");

        javax.swing.GroupLayout WorkingDirectoryFrameLayout = new javax.swing.GroupLayout(WorkingDirectoryFrame.getContentPane());
        WorkingDirectoryFrame.getContentPane().setLayout(WorkingDirectoryFrameLayout);
        WorkingDirectoryFrameLayout.setHorizontalGroup(
            WorkingDirectoryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WorkingDirectoryFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(WorkingDirectoryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WorkingDirectoryFrameLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(WorkingDirectoryFrameLayout.createSequentialGroup()
                        .addGroup(WorkingDirectoryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(WorkingDirectoryFrameLabel1)
                            .addComponent(WorkingDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WorkingDirectoryFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(WorkingDirectoryFrameSetButton)
                .addGap(18, 18, 18)
                .addComponent(WorkingDirectoryFrameCancelButton)
                .addGap(24, 24, 24))
        );
        WorkingDirectoryFrameLayout.setVerticalGroup(
            WorkingDirectoryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WorkingDirectoryFrameLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(WorkingDirectoryFrameLabel1)
                .addGap(18, 18, 18)
                .addComponent(WorkingDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(WorkingDirectoryFrameLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WorkingDirectoryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WorkingDirectoryFrameSetButton)
                    .addComponent(WorkingDirectoryFrameCancelButton))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        LogBuilderFrame.setLocationByPlatform(true);
        LogBuilderFrame.setMaximumSize(new java.awt.Dimension(450, 225));
        LogBuilderFrame.setMinimumSize(new java.awt.Dimension(450, 225));
        LogBuilderFrame.setPreferredSize(new java.awt.Dimension(450, 225));

        LogBuilderFrameLabel1.setText("File name");

        FileNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FileNameFieldKeyPressed(evt);
            }
        });

        LogBuilderFrameLabel3.setText("First day of the year is a");

        DayOfTheWeekChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));

        LogBuilderFrameLabel2.setText(".txt");

        LeapYearCheck.setText("Leap year?");
        LeapYearCheck.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        LogBuilderBuildButton.setText("Build");
        LogBuilderBuildButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        LogBuilderBuildButton.setSelected(true);
        LogBuilderBuildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogBuilderBuildButtonActionPerformed(evt);
            }
        });

        LogBuilderCompleteNotification.setText("Complete");
        LogBuilderCompleteNotification.setFocusable(false);

        LogBuilderCloseButton.setText("Close");
        LogBuilderCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogBuilderCloseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LogBuilderFrameLayout = new javax.swing.GroupLayout(LogBuilderFrame.getContentPane());
        LogBuilderFrame.getContentPane().setLayout(LogBuilderFrameLayout);
        LogBuilderFrameLayout.setHorizontalGroup(
            LogBuilderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LogBuilderFrameLayout.createSequentialGroup()
                .addGroup(LogBuilderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LogBuilderFrameLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(LogBuilderFrameLabel1)
                        .addGap(10, 10, 10)
                        .addComponent(FileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(LogBuilderFrameLabel2))
                    .addGroup(LogBuilderFrameLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(LogBuilderFrameLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DayOfTheWeekChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LeapYearCheck))
                    .addGroup(LogBuilderFrameLayout.createSequentialGroup()
                        .addGap(282, 282, 282)
                        .addComponent(LogBuilderCompleteNotification)))
                .addContainerGap(103, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LogBuilderFrameLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(LogBuilderBuildButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LogBuilderCloseButton)
                .addGap(22, 22, 22))
        );
        LogBuilderFrameLayout.setVerticalGroup(
            LogBuilderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LogBuilderFrameLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(LogBuilderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(LogBuilderFrameLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(LogBuilderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LogBuilderFrameLabel1)
                            .addComponent(LogBuilderFrameLabel2))))
                .addGroup(LogBuilderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LogBuilderFrameLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(LogBuilderFrameLabel3))
                    .addGroup(LogBuilderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DayOfTheWeekChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LeapYearCheck)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(LogBuilderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LogBuilderBuildButton)
                    .addComponent(LogBuilderCloseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LogBuilderCompleteNotification)
                .addContainerGap(105, Short.MAX_VALUE))
        );

        OverwritePopup.setLocationByPlatform(true);
        OverwritePopup.setMaximumSize(new java.awt.Dimension(230, 150));
        OverwritePopup.setMinimumSize(new java.awt.Dimension(230, 150));
        OverwritePopup.setPreferredSize(new java.awt.Dimension(230, 150));

        OverwritePopupLabel1.setText("A file with this name already exists.");

        OverwritePopupLabel2.setText("Do you want to overwrite it?");

        OverwriteYes.setText("Yes");
        OverwriteYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OverwriteYesActionPerformed(evt);
            }
        });

        OverwriteNo.setText("No");
        OverwriteNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OverwriteNoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OverwritePopupLayout = new javax.swing.GroupLayout(OverwritePopup.getContentPane());
        OverwritePopup.getContentPane().setLayout(OverwritePopupLayout);
        OverwritePopupLayout.setHorizontalGroup(
            OverwritePopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OverwritePopupLayout.createSequentialGroup()
                .addGroup(OverwritePopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OverwritePopupLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(OverwritePopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(OverwritePopupLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(OverwritePopupLabel2))
                            .addComponent(OverwritePopupLabel1)))
                    .addGroup(OverwritePopupLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(OverwriteYes)
                        .addGap(18, 18, 18)
                        .addComponent(OverwriteNo)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        OverwritePopupLayout.setVerticalGroup(
            OverwritePopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OverwritePopupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OverwritePopupLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OverwritePopupLabel2)
                .addGap(18, 18, 18)
                .addGroup(OverwritePopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OverwriteYes)
                    .addComponent(OverwriteNo))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GetMileage");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(331, 252));
        setResizable(false);

        FromLabel.setText("From");

        ToLabel.setText("To");

        TotalMileageOutputText.setEditable(false);
        TotalMileageOutputText.setToolTipText("");

        TotalMileageLabel.setText("Total mileage for this period was...");

        FromMonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        FromMonthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FromMonthComboBoxActionPerformed(evt);
            }
        });

        ToMonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        ToMonthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToMonthComboBoxActionPerformed(evt);
            }
        });

        FromYearComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015" }));
        FromYearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FromYearComboBoxActionPerformed(evt);
            }
        });

        ToYearComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015" }));
        ToYearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToYearComboBoxActionPerformed(evt);
            }
        });

        FromDayComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", " " }));
        FromDayComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FromDayComboBoxActionPerformed(evt);
            }
        });

        ToDayComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        ToDayComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToDayComboBoxActionPerformed(evt);
            }
        });

        MainMenuDropdown.setText("File");
        MainMenuDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainMenuDropdownActionPerformed(evt);
            }
        });

        WorkingDirectoryMenuItem.setText("Choose working directory");
        WorkingDirectoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WorkingDirectoryMenuItemActionPerformed(evt);
            }
        });
        MainMenuDropdown.add(WorkingDirectoryMenuItem);

        LogBuilderMenuItem.setText("Create new log file");
        LogBuilderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogBuilderMenuItemActionPerformed(evt);
            }
        });
        MainMenuDropdown.add(LogBuilderMenuItem);

        ExitMenuItem.setText("Exit");
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });
        MainMenuDropdown.add(ExitMenuItem);

        MainMenuBar.add(MainMenuDropdown);

        setJMenuBar(MainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ToLabel)
                    .addComponent(FromLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ToDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FromDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ToMonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FromMonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ToYearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FromYearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(TotalMileageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TotalMileageOutputText, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FromLabel)
                    .addComponent(FromMonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FromYearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FromDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ToYearComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ToLabel)
                        .addComponent(ToMonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ToDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TotalMileageLabel)
                    .addComponent(TotalMileageOutputText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(119, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FromMonthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FromMonthComboBoxActionPerformed
        updateDisplay();
    }//GEN-LAST:event_FromMonthComboBoxActionPerformed

    private void ToMonthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToMonthComboBoxActionPerformed
        updateDisplay();
    }//GEN-LAST:event_ToMonthComboBoxActionPerformed

    private void FromYearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FromYearComboBoxActionPerformed
        updateDisplay();
    }//GEN-LAST:event_FromYearComboBoxActionPerformed

    private void ToYearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToYearComboBoxActionPerformed
        updateDisplay();
    }//GEN-LAST:event_ToYearComboBoxActionPerformed

    private void FromDayComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FromDayComboBoxActionPerformed
        updateDisplay();
    }//GEN-LAST:event_FromDayComboBoxActionPerformed

    private void ToDayComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToDayComboBoxActionPerformed
        updateDisplay();
    }//GEN-LAST:event_ToDayComboBoxActionPerformed

    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitMenuItemActionPerformed

    private void MainMenuDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainMenuDropdownActionPerformed
        
    }//GEN-LAST:event_MainMenuDropdownActionPerformed

    private void WorkingDirectoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WorkingDirectoryMenuItemActionPerformed
        WorkingDirectoryFrame.setVisible(true);
        WorkingDirectoryTextField.setText(workingDirectory.toString());
    }//GEN-LAST:event_WorkingDirectoryMenuItemActionPerformed

    private void WorkingDirectoryFrameCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WorkingDirectoryFrameCancelButtonActionPerformed
        WorkingDirectoryFrame.setVisible(false);
        WorkingDirectoryTextField.setBackground(Color.white);
    }//GEN-LAST:event_WorkingDirectoryFrameCancelButtonActionPerformed

    private void WorkingDirectoryFrameSetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WorkingDirectoryFrameSetButtonActionPerformed
        if(Files.exists(Paths.get(WorkingDirectoryTextField.getText())) 
                && Files.isReadable(Paths.get(WorkingDirectoryTextField.getText()))) {
            workingDirectory = Paths.get(WorkingDirectoryTextField.getText());
            System.out.println("New working directory is " + workingDirectory.toString());
            WorkingDirectoryFrame.setVisible(false);
        }
        else {
            WorkingDirectoryTextField.setBackground(Color.pink);
            System.out.println("Error: " + WorkingDirectoryTextField.getText() + " doesn't exist or isn't readable");
        }
    }//GEN-LAST:event_WorkingDirectoryFrameSetButtonActionPerformed

    private void FileNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FileNameFieldKeyPressed
        // TODO add your handling code here:
        LogBuilderCompleteNotification.setVisible(false);
    }//GEN-LAST:event_FileNameFieldKeyPressed

    private void LogBuilderBuildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogBuilderBuildButtonActionPerformed

        //check that filename field contains something
        if (!FileNameField.getText().isEmpty()) {
            //capture selections/text from other fields in the GUI
            filename = FileNameField.getText() + ".txt";
            firstDayOfTheWeekString = DayOfTheWeekChooser.getSelectedItem().toString();
            leapYear = LeapYearCheck.isSelected();

            //check if filename exists, and prompt for overwrite if it does
            newFile = Paths.get(filename);
            if (Files.exists(newFile))
            {
                // pop-up box to notify and ask for overwrite permission
                FileNameField.setEnabled(false);
                DayOfTheWeekChooser.setEnabled(false);
                LeapYearCheck.setEnabled(false);
                LogBuilderBuildButton.setEnabled(false);
                OverwritePopup.setVisible(true);
                //exit this method to wait for next action from pop-up box
            }
            else {
                //instantiate LogBuilder, passing selections/text to its constructor
                instantiateAndBuild();
            }
        }
    }//GEN-LAST:event_LogBuilderBuildButtonActionPerformed

    private void LogBuilderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogBuilderMenuItemActionPerformed
        LogBuilderCompleteNotification.setVisible(false);
        LogBuilderFrame.setVisible(true);
    }//GEN-LAST:event_LogBuilderMenuItemActionPerformed

    private void LogBuilderCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogBuilderCloseButtonActionPerformed
        LogBuilderFrame.setVisible(false);
        FileNameField.setText(null);
    }//GEN-LAST:event_LogBuilderCloseButtonActionPerformed

    private void OverwriteYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OverwriteYesActionPerformed
        mustDeleteFile = true;
        OverwritePopup.setVisible(false);
        FileNameField.setEnabled(true);
        DayOfTheWeekChooser.setEnabled(true);
        LeapYearCheck.setEnabled(true);
        LogBuilderBuildButton.setEnabled(true);
        instantiateAndBuild();
        mustDeleteFile = false; //set the flag back to the default "false" for the next time
    }//GEN-LAST:event_OverwriteYesActionPerformed

    private void OverwriteNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OverwriteNoActionPerformed
        OverwritePopup.setVisible(false);
        FileNameField.setEnabled(true);
        DayOfTheWeekChooser.setEnabled(true);
        LeapYearCheck.setEnabled(true);
        LogBuilderBuildButton.setEnabled(true);
    }//GEN-LAST:event_OverwriteNoActionPerformed

    private void updateDisplay() {
        if (FromMonthComboBox.getSelectedItem() != null && ToMonthComboBox.getSelectedItem() != null
                && FromYearComboBox.getSelectedItem() != null && ToYearComboBox.getSelectedItem() != null
                && FromDayComboBox.getSelectedItem() != null && ToDayComboBox.getSelectedItem() != null) {
            
                try {
                    MileageAdder adder = new MileageAdder(
                        FromDayComboBox.getSelectedItem().toString(),
                        FromMonthComboBox.getSelectedItem().toString(),
                        FromYearComboBox.getSelectedItem().toString(),
                        ToDayComboBox.getSelectedItem().toString(),
                        ToMonthComboBox.getSelectedItem().toString(),
                        ToYearComboBox.getSelectedItem().toString());

                    TotalMileageOutputText.setText(Integer.toString((int)adder.getTotalMileage()));
                    avgWeeklyMileage = adder.getWeeklyMileage();
                }
                catch (InvalidDateRangeException e1) {
                    System.out.println(e1.getMessage());
                    TotalMileageOutputText.setText("Invalid");
                    avgWeeklyMileage = 0;
                }
                catch (IOException e2) {
                    System.out.println(e2.getMessage());
                    TotalMileageOutputText.setText("0");
                    avgWeeklyMileage = 0;
                }
                finally {
                    weeklyPanel.repaint();
                }
        }
    }
    
    private void instantiateAndBuild() {
        //pass inputs to LogBuilder constructor
        LogBuilder tempBuilder = new LogBuilder(newFile, firstDayOfTheWeekString, leapYear, mustDeleteFile);
        
        //execute the logic to build the file
        tempBuilder.buildIt();
        
        //check for completion and notify the user
        LogBuilderCompleteNotification.setVisible(tempBuilder.wasBuildSuccessful());
    }
    
    private class WeeklyMileagePanel extends javax.swing.JPanel {
        @Override
        public void paintComponent(Graphics g) { //invoked when the panel is added initially, when the window goes off screen and comes back, or when repaint is called 
            super.paintComponent(g);
            
            if(avgWeeklyMileage < 10)
                g.setColor(Color.red);
            else if (avgWeeklyMileage < 15)
                g.setColor(Color.orange);
            else if (avgWeeklyMileage < 20)
                g.setColor(Color.yellow);
            else if (avgWeeklyMileage < 25)
                g.setColor(Color.green);
            else
                g.setColor(Color.blue);

            g.fillRect(0, 0, (int)(avgWeeklyMileage * 5), 30);
            g.setColor(Color.black);
            g.drawString("Avg. week: " + Integer.toString((int)avgWeeklyMileage) + " miles", 10, 20);
        }   
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MileageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MileageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MileageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MileageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MileageUI().setVisible(true);
            }
        });
        
        workingDirectory = Paths.get("temp").toAbsolutePath().getParent();
        System.out.println("Working directory is " + workingDirectory.toString());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox DayOfTheWeekChooser;
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JTextField FileNameField;
    private javax.swing.JComboBox FromDayComboBox;
    private javax.swing.JLabel FromLabel;
    private javax.swing.JComboBox FromMonthComboBox;
    private javax.swing.JComboBox FromYearComboBox;
    private javax.swing.JCheckBox LeapYearCheck;
    private javax.swing.JButton LogBuilderBuildButton;
    private javax.swing.JButton LogBuilderCloseButton;
    private javax.swing.JLabel LogBuilderCompleteNotification;
    private javax.swing.JFrame LogBuilderFrame;
    private javax.swing.JLabel LogBuilderFrameLabel1;
    private javax.swing.JLabel LogBuilderFrameLabel2;
    private javax.swing.JLabel LogBuilderFrameLabel3;
    private javax.swing.JMenuItem LogBuilderMenuItem;
    private javax.swing.JMenuBar MainMenuBar;
    private javax.swing.JMenu MainMenuDropdown;
    private javax.swing.JButton OverwriteNo;
    private javax.swing.JDialog OverwritePopup;
    private javax.swing.JLabel OverwritePopupLabel1;
    private javax.swing.JLabel OverwritePopupLabel2;
    private javax.swing.JButton OverwriteYes;
    private javax.swing.JComboBox ToDayComboBox;
    private javax.swing.JLabel ToLabel;
    private javax.swing.JComboBox ToMonthComboBox;
    private javax.swing.JComboBox ToYearComboBox;
    private javax.swing.JLabel TotalMileageLabel;
    private javax.swing.JTextField TotalMileageOutputText;
    private javax.swing.JFrame WorkingDirectoryFrame;
    private javax.swing.JButton WorkingDirectoryFrameCancelButton;
    private javax.swing.JLabel WorkingDirectoryFrameLabel1;
    private javax.swing.JLabel WorkingDirectoryFrameLabel2;
    private javax.swing.JButton WorkingDirectoryFrameSetButton;
    private javax.swing.JMenuItem WorkingDirectoryMenuItem;
    private javax.swing.JTextField WorkingDirectoryTextField;
    // End of variables declaration//GEN-END:variables
}
